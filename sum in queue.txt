#include <stdio.h>
#include <stdlib.h>

#define MAX 100 // Maximum size of the queue

typedef struct {
    int data[MAX];
    int front;
    int rear;
} Queue;

// Function to initialize the queue
void initializeQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(Queue *q) {
    return q->front == -1;
}

// Function to check if the queue is full
int isFull(Queue *q) {
    return q->rear == MAX - 1;
}

// Function to enqueue an element
void enqueue(Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (q->front == -1)
        q->front = 0;
    q->data[++q->rear] = value;
}

// Function to dequeue an element
int dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    int value = q->data[q->front];
    if (q->front == q->rear) { // If the queue becomes empty
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return value;
}

// Function to calculate the sum of elements in the queue
int sumOfQueueElements(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return 0;
    }
    int sum = 0;
    for (int i = q->front; i <= q->rear; i++) {
        sum += q->data[i];
    }
    return sum;
}

// Main function
int main() {
    Queue q;
    initializeQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);

    printf("Sum of elements in the queue: %d\n", sumOfQueueElements(&q));

    dequeue(&q);
    printf("Sum of elements after dequeuing: %d\n", sumOfQueueElements(&q));

    return 0;
}
