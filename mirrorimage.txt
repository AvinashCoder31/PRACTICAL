#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node *left, *right;
} Node;


Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


Node* insert(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}


void inorderTraversal(Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}


void generateMirror(Node* root) {
    if (root == NULL) {
        return;
    }

 
    Node* temp = root->left;
    root->left = root->right;
    root->right = temp;

    generateMirror(root->left);
    generateMirror(root->right);
}


int main() {
    Node* root = NULL;
    int n, data;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the values of the nodes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        root = insert(root, data);
    }

    printf("\nOriginal BST (Inorder Traversal): ");
    inorderTraversal(root);

    generateMirror(root);

    printf("\nMirror Image of BST (Inorder Traversal): ");
    inorderTraversal(root);

    return 0;
}
