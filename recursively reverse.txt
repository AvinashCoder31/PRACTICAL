#include <stdio.h>
#include <stdlib.h>

typedef struct Stack {
    int top;
    int capacity;
    int* array;
} Stack;

Stack* createStack(int capacity) {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*)malloc(stack->capacity * sizeof(int));
    return stack;
}

int isEmpty(Stack* stack) {
    return stack->top == -1;
}

int isFull(Stack* stack) {
    return stack->top == stack->capacity - 1;
}

void push(Stack* stack, int item) {
    if (isFull(stack)) {
        printf("Stack overflow.\n");
        return;
    }
    stack->array[++stack->top] = item;
}

int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow.\n");
        return -1;
    }
    return stack->array[stack->top--];
}

void printStack(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return;
    }
    printf("Stack elements: ");
    for (int i = 0; i <= stack->top; i++) {
        printf("%d ", stack->array[i]);
    }
    printf("\n");
}

void insertAtBottom(Stack* stack, int item) {
    if (isEmpty(stack)) {
        push(stack, item);
        return;
    }
    int temp = pop(stack);
    insertAtBottom(stack, item);
    push(stack, temp);
}

void reverseStack(Stack* stack) {
    if (isEmpty(stack)) {
        return;
    }
    int temp = pop(stack);
    reverseStack(stack);
    insertAtBottom(stack, temp);
}

int main() {
    Stack* stack = createStack(10);
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);
    push(stack, 4);

    printf("Original Stack:\n");
    printStack(stack);

    reverseStack(stack);

    printf("Reversed Stack:\n");
    printStack(stack);

    free(stack->array);
    free(stack);

    return 0;
}
