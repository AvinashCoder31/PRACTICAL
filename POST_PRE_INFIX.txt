#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Global variables for stack
char stack[MAX];
int top = -1;

// Stack operations
void push(char c) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = c;
}

char pop() {
    if (top == -1) {
        return '\0'; // Return null character if stack is empty
    }
    return stack[top--];
}

char peek() {
    if (top == -1) {
        return '\0'; // Return null character if stack is empty
    }
    return stack[top];
}

// Function to check precedence of operators
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Function to check if a character is an operator
int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to convert infix to postfix
void infixToPostfix(char* infix, char* postfix) {
    int k = 0;

    for (int i = 0; infix[i]; i++) {
        if (isalnum(infix[i])) { // If operand, add to postfix
            postfix[k++] = infix[i];
        } else if (infix[i] == '(') { // If '(', push to stack
            push(infix[i]);
        } else if (infix[i] == ')') { // If ')', pop until '('
            while (top != -1 && peek() != '(') {
                postfix[k++] = pop();
            }
            pop(); // Remove '(' from stack
        } else if (isOperator(infix[i])) { // If operator
            while (top != -1 && precedence(peek()) >= precedence(infix[i])) {
                postfix[k++] = pop();
            }
            push(infix[i]);
        }
    }

    // Pop remaining operators from stack
    while (top != -1) {
        postfix[k++] = pop();
    }

    postfix[k] = '\0';
}

// Function to reverse a string
void reverseString(char* str) {
    int n = strlen(str);
    for (int i = 0; i < n / 2; i++) {
        char temp = str[i];
        str[i] = str[n - i - 1];
        str[n - i - 1] = temp;
    }
}

// Function to convert infix to prefix
void infixToPrefix(char* infix, char* prefix) {
    // Reverse the infix expression
    reverseString(infix);

    // Replace '(' with ')' and vice versa
    for (int i = 0; infix[i]; i++) {
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }

    // Convert the modified infix to postfix
    char postfix[MAX];
    infixToPostfix(infix, postfix);

    // Reverse the postfix expression to get prefix
    reverseString(postfix);
    strcpy(prefix, postfix);
}

int main() {
    char infix[MAX], postfix[MAX], prefix[MAX];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    // Convert infix to postfix
    infixToPostfix(infix, postfix);
    printf("Postfix: %s\n", postfix);

    // Convert infix to prefix
    infixToPrefix(infix, prefix);
    printf("Prefix: %s\n", prefix);

    return 0;
}
